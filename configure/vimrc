let $LANG = 'en'  "set message language
set langmenu=en   "set menu's language of gvim. no spaces beside '='  Configuration file for vim
set modelines=0		" CVE-2007-2438
set t_Co=256
set number
set laststatus=2
set ts=2
set tabstop=2
set shiftwidth=2
set softtabstop=2
set showtabline=2
set smartindent
set expandtab
set noautoindent
set rnu
set incsearch
set nowrap
set ignorecase
"set clipboard=unnamed
set autoread
set autowriteall
set fileencodings=utf-8,gbk
set termencoding=utf-8
set encoding=utf-8
set ai
set hls
set helplang=cn
set history=400
"不自动创建备份文件
set nobackup
set noswapfile
set background=light
"粘贴模式切换
set pastetoggle=<F9>
"快捷命令
"nnoremap <silent> <F5> :!open % -a Sublime\ Text<cr>
nnoremap <silent> <F5> :call OpenFile()<cr>
function OpenFile()
  let ext = expand("%:e")
  let filename = "%"
  "echo ext
  "echo filename
  if ext == 'md' 
    exec "!open -a Markdown\\ Plus %"
  else
    exec "!open -a Sublime\\ Text %"
  endif
endfunction

set cursorline
" Normally we use vim-extensions. If you want true vi-compatibility
" remove change the following statements
set nocompatible	" Use Vim defaults instead of 100% vi compatibility
set backspace=2		" more powerful backspacing
nnoremap <C-l> gt
nnoremap <C-h> gT

"vmap y :w !pbcopy<CR><CR>
"nmap yy :.w !pbcopy<CR><CR>
"nmap p :r !pbpaste<CR><CR>

vmap "+y :w !pbcopy<CR><CR> 
nmap "+p :r !pbpaste<CR><CR> 

filetype off
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()
" let Vundle manage Vundle
" required!
Bundle 'gmarik/vundle'
" My Bundles here:
"
" vim-scripts repos
"Bundle 'L9'
"
" non github repos
"Bundle 'git://git.wincent.com/command-t.git'
"
" original repos on github

Bundle 'WinManager'
Bundle 'scrooloose/nerdtree'
Bundle 'bling/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Bundle 'surround.vim'
Bundle 'ctrlp.vim'
Bundle 'jsbeautify'
Bundle 'molokai'
Bundle 'mattn/emmet-vim'
Bundle 'rking/ag.vim'
" ts
Plugin 'leafgarland/typescript-vim'
Plugin 'isRuslan/vim-es6' 
Plugin 'godlygeek/tabular'
Plugin 'plasticboy/vim-markdown'
Plugin 'kchmck/vim-coffee-script'
Plugin 'vim-stylus'
Plugin 'jade.vim'
Plugin 'Valloric/YouCompleteMe'
Plugin 'posva/vim-vue'
Plugin 'digitaltoad/vim-pug'
Plugin 'Tagbar'
Plugin 'SirVer/ultisnips'
Plugin 'Sass'

syntax enable
syntax on
filetype plugin indent on     " required!
"
" Brief help  -- 此处后面都是vundle的使用命令
" :BundleList          - list configured bundles
" :BundleInstall(!)    - install(update) bundles
" :BundleSearch(!) foo - search(or refresh cache first) for foo
" :BundleClean(!)      - confirm(or auto-approve) removal of unused bundles

"leafgarland/typescript-vim
let g:typescript_compiler_binary = 'tsc'
"let g:typescript_compiler_options = ''

"tagbar
  nmap <F8> :TagbarToggle<CR>

"jsdoc
    let g:jsdoc_default_mapping=0
    let g:jsdoc_additional_descriptions=0
    nnoremap <F6> :JsDoc<cr>

"ag.vim
    nnoremap <F3> :Ag<space>
    let g:ag_highlight=1
    let g:ag_prg="ag --colum --smart-case"

colorscheme molokai
" make vim background transparen
hi Normal ctermfg=252 ctermbg=none
" 比较喜欢用tab来选择补全...
function! MyTabFunction ()
  let line = getline('.')
  let substr = strpart(line, -1, col('.')+1)
  let substr = matchstr(substr, "[^ \t]*$")
  if strlen(substr) == 0
    return "\<tab>"
  endif
  return pumvisible() ? "\<c-n>" :
  "\<c-x>\<c-o>"
endfunction
inoremap <tab> <c-r>=MyTabFunction()<cr>

"tern{
"  let g:tern_show_signature_in_pum = 1
"  let g:tern_set_omni_function = 1
"  :runtime after/ftplugin/javascript_tern.vim
"  :set ft=html.javascript_tern
"  :set ft=html.javascript
"}

let mapleader=","
"YouCompleteMe
  let g:ycm_seed_identifiers_with_syntax = 1
  let g:ycm_autoclose_preview_window_after_completion = 1
  let g:ycm_autoclose_preview_window_after_insertion = 1
  let g:ycm_goto_buffer_command = 'horizontal-split'
  let g:ycm_add_preview_to_completeopt = 1
  let g:ycm_seed_identifiers_with_syntax = 1
  "let g:ycm_cache_omnifunc = 0
  let g:ycm_semantic_triggers = {
    \  'javascript,typescript': ['.', '(', 're!(?=[a-zA-Z]{3,4})']
  \}
  nnoremap <leader>yd :YcmCompleter GoToDefinition<CR>
  nnoremap <leader>yt :YcmCompleter GetType<CR>
  "让Vim的补全菜单行为与一般IDE一致(参考VimTip1228)
  set completeopt=longest,menu
"}

"{ ultisnips
  " 跳到下一个可修改词
  let g:UltiSnipsJumpForwardTrigger = '<CR>'
  function! MyOnCompleteDone()
    if !exists('v:completed_item') || empty(v:completed_item)
      return "\<C-y>"
    endif
    let complete_str = v:completed_item.word
    if complete_str == ''
      return "\<C-y>"
    endif
    let abbr = v:completed_item.abbr
    let methodIdx = match(abbr, "(method)")
    let startIdx = match(abbr, "(", methodIdx + 1)
    let endIdx = match(abbr, ")", startIdx)
    if endIdx - startIdx >= 1
      let argsStr = strpart(abbr, startIdx + 1, endIdx - startIdx -1)
      let b:ref = argsStr
      let argsList = split(argsStr, ",")
      let snippet = "" 
      let snippets = []
      let c = 1
      for i in argsList
        let nameAndType = split(i, ':')
        " strip space
        let nospace = substitute(nameAndType[0], '^\s*\(.\{-}\)\s*$', '\1', '') 
        " 不自动填入参数类型，仅保留变量名
        call add(snippets, "${".c.":".nospace."}")
        let c += 1
      endfor
      let snippet = "(".join(snippets, ', ').")$0"
      return UltiSnips#Anon(snippet)
    endif
  endfunction
  "回车即选中当前项, c-y 为应用选项
  "autocmd CompleteDone *.ts  call MyOnCompleteDone()
  inoremap <expr> <CR> pumvisible() ? "\<C-R>=MyOnCompleteDone()\<CR>" : "\<CR>"
"}

"ctrl.vim{
    let g:ctrlp_map = '<c-p>'
    let g:ctrlp_cmd = 'CtrlP'
    let g:ctrlp_working_path_mode = 'w'
    let g:ctrlp_by_filename = '1'
    let g:ctrlp_custom_ignore = '\v[\/](node_modules|build|webuiTest)|(\.(swp|ico|git|svn))$'
    let g:ctrlp_open_new_file = 't'
    let g:ctrlp_clear_cache_on_exit = 1
"    let g:ctrlp_user_command = 'find %s -type f'
" }

"airline {
    let g:Airline_theme = 'solarized'
    let g:airline_solarized_bg = 'dark'
"}

"Nerdtree{
    let g:NERDTree_title="[NERDTree]"
    let g:NERTreeWinPos='left'
    function! NERDTree_Start()
        exec 'NERDTree'
    endfunction

    function! NERDTree_IsValid()
            return 1
    endfunction
"}

"Winmanager {
    "let g:winManagerWindowLayout="NERDTree|TagList"
    "let g:winManagerWidth = 30
    "let g:defaultExplorer = 0    "Don't write backup file if vim is being called by "crontab -e"
    "let g:persistentBehaviour = 0
    noremap <F2> :NERDTreeToggle<cr>
    ":nmap <C-K> <C-W>w
    " open nerdtree when vim enter
    ":autocmd BufEnter *.* :set rnu
"}

"vim-vue{
    let g:vue_disable_pre_processors=1
    autocmd FileType vue syntax sync fromstart
    autocmd BufRead,BufNewFile *.vue setlocal filetype=vue.pug.javascript.stylus.Sass.sass.scss.css
    "autocmd FileType vue syntax sync fromstart
"}
"vim-markdown{
    let g:vim_markdown_frontmatter=1
    let g:vim_markdown_math=1
    let g:vim_markdown_folding_disabled=1
"}

"coffee-script{
    let g:coffee_watch_vert = 1
    let coffee_make_options = '--no-header'
"}
"color config
"pup Menu
" see :h vundle for more details or wiki for FAQ
" NOTE: comments after Bundle command are not allowed..
hi Pmenu ctermfg=white ctermbg=017


au BufWrite /private/tmp/crontab.* set nowritebackup
" Don't write backup file if vim is being called by "chpass"
au BufWrite /private/etc/pw.* set nowritebackup

" remove ^M
au BufWrite *.js ks|execute ":%s/\r$//ge"|'s
" remove line end space when save file
au BufWrite *.js ks|execute ":%s/\\s*$//ge"|'s

" wxss使用css高量，wxml使用html高亮
au BufNewFile,BufRead *.wxss setf css
au BufNewFile,BufRead *.wxml setf html
