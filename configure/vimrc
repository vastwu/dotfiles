let $LANG = 'en'  "set message language
set langmenu=en   "set menu's language of gvim. no spaces beside '='  Configuration file for vim
set modelines=0		" CVE-2007-2438
set t_Co=256
set number
set laststatus=2
set ts=2
set tabstop=2
set shiftwidth=2
set softtabstop=2
set showtabline=2
set smartindent
set expandtab
set noautoindent
set rnu
set incsearch
set nowrap
set ignorecase
"set clipboard=unnamed
set autoread
set autowriteall
set fileencodings=utf-8,gbk
set termencoding=utf-8
set encoding=utf-8
set ai
set hls
set helplang=cn
set history=400
"不自动创建备份文件
set nobackup
set noswapfile
set background=light
"粘贴模式切换
set pastetoggle=<F9>
" 格式化命令
set formatoptions=tcpmM
"快捷命令
"nnoremap <silent> <F5> :!open % -a Sublime\ Text<cr>
nnoremap <silent> <F5> :call OpenFile()<cr>
vnoremap <F5> :CarbonNowSh<CR>
function OpenFile()
  let ext = expand("%:e")
  let filename = "%"
  "echo ext
  "echo filename
  if ext == 'md' 
    exec "!open -a Markdown\\ Plus %"
  else
    exec "!open -a Visual\\ Studio\\ Code %"
  endif
endfunction

set cursorline
" Normally we use vim-extensions. If you want true vi-compatibility
" remove change the following statements
set nocompatible	" Use Vim defaults instead of 100% vi compatibility
set backspace=2		" more powerful backspacing
nnoremap <C-l> gt
nnoremap <C-h> gT

"vmap y :w !pbcopy<CR><CR>
"nmap yy :.w !pbcopy<CR><CR>
"nmap p :r !pbpaste<CR><CR>

vmap "+y :w !pbcopy<CR><CR> 
nmap "+p :r !pbpaste<CR><CR> 

filetype on
set rtp+=~/.vim/bundle/vundle/

call plug#begin('~/.vim/plugged')

Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'scrooloose/nerdtree'
Plug 'bling/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'https://github.com/tpope/vim-surround'
"Plug '~/.vim/plugged/molokai'
Plug 'https://github.com/tomasr/molokai'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'https://github.com/alok/notational-fzf-vim'
" ts
Plug 'leafgarland/typescript-vim'
Plug 'peitalin/vim-jsx-typescript'
Plug 'isRuslan/vim-es6' 
Plug 'godlygeek/tabular'
Plug 'plasticboy/vim-markdown'
Plug 'https://github.com/preservim/tagbar'
Plug 'tpope/vim-fugitive'
Plug 'w0rp/ale'
Plug 'kristijanhusak/vim-carbon-now-sh'
call plug#end()

" 太慢了先关掉
syntax enable
syntax on
filetype plugin indent on     " required!
filetype plugin on

"ale
""始终开启标志列
let g:ale_sign_column_always = 1
let g:ale_set_highlights = 0
" 文件变化时不检查, 保存时检查
let g:ale_lint_on_text_changed = 'never'
" 打开文件时不检查
let g:ale_lint_on_enter = 0
"自定义error和warning图标
let g:ale_sign_error = '✗'
let g:ale_sign_warning = '⚡'
"在vim自带的状态栏中整合ale
let g:ale_statusline_format = ['✗ %d', '⚡ %d', '✔ OK']
let g:ale_javascript_eslint_options = '-c ~/.eslintrc'
" let g:ale_javascript_eslint_use_global = 1
" airline整合
let g:airline#extensions#ale#enabled = 1
"let b:ale_linters = ['eslint']
let g:ale_linters = {'javascript': ['eslint', 'tsserver']}
" let g:ale_open_list = 1
"显示Linter名称,出错或警告等相关信息
"let g:ale_echo_msg_error_str = 'E'
"let g:ale_echo_msg_warning_str = 'W'
"let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
""普通模式下，sp前往上一个错误或警告，sn前往下一个错误或警告
nmap sp <Plug>(ale_previous_wrap)
nmap sn <Plug>(ale_next_wrap)
"<Leader>s触发/关闭语法检查
"nmap <Leader>s :ALEToggle<CR>
""<Leader>d查看错误或警告的详细信息
nmap <Leader>d :ALEDetail<CR>

function! LinterStatus() abort
  let l:counts = ale#statusline#Count(bufnr(''))

  let l:all_errors = l:counts.error + l:counts.style_error
  let l:all_non_errors = l:counts.total - l:all_errors

  return l:counts.total == 0 ? 'OK' : printf(
        \   '%dW %dE',
        \   all_non_errors,
        \   all_errors
        \)
endfunction

set statusline=%{LinterStatus()}

"tagbar
  nmap <F8> :TagbarToggle<CR>

"jsdoc
  let g:jsdoc_default_mapping=0
  let g:jsdoc_additional_descriptions=0
  nnoremap <F6> :JsDoc<cr>


"fzf
  nmap <C-p> :Files<CR>
  let g:fzf_preview_window = ''
  let g:fzf_preview_window = 'right:40%'
  let g:fzf_commits_log_options = '--graph --color=always --format="%C(auto)%h%d %s %C(black)%C(bold)%cr"'
  "let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.6 } }

"alok/notational-fzf-vim'
  nnoremap <F3> :NV<space>
  let g:nv_search_paths = ['./']
  let g:nv_ignore_pattern = ['yarn.lock', 'yarn-error.log', 'node_modules', 'docs']
  let g:nv_use_short_pathnames = 0


colorscheme molokai
" make vim background transparen
hi Normal ctermfg=252 ctermbg=none

let mapleader=","

" tpope/vim-fugitive/ {
cnoremap gb Git blame<CR>

"function! s:ToggleBlame()
"  if :Gblame buffer is open:
"    close buffer
"  endif
"endfunction
"noremap q :call <SID>ToggleBlame()<CR>

" }

"coc.nvim {
let g:coc_global_extensions = ['coc-tsserver']
set cmdheight=2

" 跳转定义
nmap <silent>gd <Plug>(coc-definition)
nmap <silent>gy <Plug>(coc-type-definition)
" 跳转实现
nmap <silent>gi <Plug>(coc-implementation)
" 跳转引用
nmap <silent>gr <Plug>(coc-references)

nmap <silent>do <Plug>(coc-codeaction)

" 格式化选中代码
xmap <leader>f  <Plug>(coc-format-selected)

" 按空格选择第一个提示并跟随一个空格
inoremap <expr><space> pumvisible() ? coc#_select_confirm() . "\<SPACE>" : "\<SPACE>"
" tab选下一个
" 非弹窗状态下tab激活提示
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

set updatetime=1000
" autocmd CursorHold * silent call CocActionAsync('doHover')
autocmd CursorHold * silent call CocActionAsync('highlight')

nnoremap <silent> K :call <SID>show_documentation()<CR>
function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction


" nmap <silent> [g <Plug>(coc-diagnostic-prev)
" nmap <silent> ]g <Plug>(coc-diagnostic-next)
"}

"ctrl.vim{
    let g:ctrlp_map = '<c-p>'
    let g:ctrlp_cmd = 'CtrlP'
    let g:ctrlp_working_path_mode = 'w'
    let g:ctrlp_by_filename = '0'
    let g:ctrlp_custom_ignore = '\v[\/](node_modules|build|webuiTest|dist|coverage)|(\.(swp|ico|git|svn))$'
    let g:ctrlp_open_new_file = 't'
    let g:ctrlp_clear_cache_on_exit = 1
"    let g:ctrlp_user_command = 'find %s -type f'
" }

"airline {
    let g:Airline_theme = 'solarized'
    let g:airline_solarized_bg = 'dark'
"}

"Nerdtree{
    noremap <F2> :NERDTreeToggle<cr>
    let g:NERDTreeShowHidden = 1
    let g:NERDTreeIgnore = ['\.git$', '\.DS_Store', '\.swo', '\.vscode', '__pycache__'] 
    let g:NERDTree_title="[NERDTree]"
    let g:NERTreeWinPos='left'
    let g:NERDTreeWinSize = 50
    function! NERDTree_Start()
        exec 'NERDTree'
    endfunction

    function! NERDTree_IsValid()
            return 1
    endfunction
"}

"vim-markdown{
    let g:vim_markdown_frontmatter=1
    let g:vim_markdown_math=1
    let g:vim_markdown_folding_disabled=1
"}

"color config
"pup Menu
" see :h vundle for more details or wiki for FAQ
" NOTE: comments after Bundle command are not allowed..
hi Pmenu ctermfg=white ctermbg=017


au BufWrite /private/tmp/crontab.* set nowritebackup
" Don't write backup file if vim is being called by "chpass"
au BufWrite /private/etc/pw.* set nowritebackup

" remove ^M
au BufWrite *.{js,jsx,ts,tsx} ks|execute ":%s/\r$//ge"|'s
" remove line end space when save file
" au BufWrite *.{js,jsx,ts,tsx} ks|execute ":%s/\\s*$//ge"|'s

" wxss使用css高量，wxml使用html高亮
"au BufNewFile,BufRead *.wxss setf css
"au BufNewFile,BufRead *.wxml setf html
"au BufNewFile,BufRead *.txt setf js
set runtimepath^=~/.vim/bundle/ag

"autocmd BufNewFile,BufRead *.tsx,*.jsx set filetype=typescriptreact

